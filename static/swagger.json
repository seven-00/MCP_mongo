{
    "swagger": "2.0",
    "info": {
        "title": "MongoDB Flask API",
        "description": "Interactive API Documentation for MongoDB Flask API",
        "version": "1.0.0"
    },
    "host": "127.0.0.1:5000",
    "schemes": [
        "http"
    ],
    "paths": {
        "/health": {
            "get": {
                "summary": "Health Check",
                "description": "Health check with database stats",
                "responses": {
                    "200": {
                        "description": "Database connection status and statistics"
                    }
                }
            }
        },
        "/collections": {
            "get": {
                "summary": "Get Collections",
                "description": "List all collections with counts and sample fields",
                "responses": {
                    "200": {
                        "description": "Array of collection information"
                    }
                }
            }
        },
            "/gemini/analyze": {
                "post": {
                    "summary": "Analyze Collection with Gemini AI",
                    "description": "Analyze data from a specific collection using Google's Gemini AI with a custom prompt template",
                    "tags": [
                        "AI Analysis"
                    ],
                    "requestBody": {
                        "required": true,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "collection_name",
                                        "prompt_template"
                                    ],
                                    "properties": {
                                        "collection_name": {
                                            "type": "string",
                                            "description": "Name of the collection to analyze",
                                            "example": "theaters"
                                        },
                                        "prompt_template": {
                                            "type": "string",
                                            "description": "Custom prompt template for AI analysis",
                                            "example": "Provide insights on this data"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Successful analysis response from Gemini AI",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "analysis": {
                                                "type": "string",
                                                "description": "AI-generated analysis of the collection data"
                                            },
                                            "collection_name": {
                                                "type": "string",
                                                "description": "Name of the analyzed collection"
                                            },
                                            "prompt_used": {
                                                "type": "string",
                                                "description": "The prompt template that was used"
                                            },
                                            "timestamp": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "Timestamp of the analysis"
                                            }
                                        }
                                    },
                                    "example": {
                                        "analysis": "Based on the theater data analysis, I can provide the following insights: The dataset contains information about movie theaters with key patterns in location distribution, seating capacity trends, and operational metrics...",
                                        "collection_name": "theaters",
                                        "prompt_used": "Provide insights on this data",
                                        "timestamp": "2024-01-15T10:30:45Z"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad Request - Missing required fields",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Error message"
                                            }
                                        }
                                    },
                                    "example": {
                                        "error": "Collection name is required"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Collection not found",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Error message"
                                            }
                                        }
                                    },
                                    "example": {
                                        "error": "Collection 'invalid_collection' not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal Server Error - AI service unavailable or processing error",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Error message"
                                            }
                                        }
                                    },
                                    "example": {
                                        "error": "Gemini AI service temporarily unavailable"
                                    }
                                }
                            }
                        }
                    }
                }
            },
        "/query/{collection}": {
            "get": {
                "summary": "Query Collection with Advanced Filtering",
                "description": "Query collection with advanced filtering",
                "parameters": [
                    {
                        "name": "collection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the collection to query"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of documents to return (max 1000)"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "description": "Number of documents to skip"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Sort fields (comma-separated, prefix with - for desc)"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Fields to include/exclude (comma-separated, prefix with - to exclude)"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Text search across common fields"
                    },
                    {
                        "name": "field__operator",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Advanced filtering (gte, lte, gt, lt, ne, in, nin, regex, exists)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query results"
                    }
                }
            }
        },
        "/collection/{collection}/schema": {
            "get": {
                "summary": "Get Schema Information",
                "description": "Get schema information for collection",
                "parameters": [
                    {
                        "name": "collection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the collection to analyze"
                    },
                    {
                        "name": "sample_size",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Number of documents to sample for schema inference"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schema information"
                    }
                }
            }
        },
        "/collection/{collection}/aggregate": {
            "post": {
                "summary": "Execute MongoDB Aggregation Pipeline",
                "description": "Execute MongoDB aggregation pipeline",
                "parameters": [
                    {
                        "name": "collection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the collection to aggregate"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pipeline": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    },
                                    "description": "Array of aggregation stages"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Aggregation results"
                    }
                }
            }
        }
    }
}